---
import { readAll } from "../../lib/markdoc/read";
import { blog } from "../../lib/markdoc/frontmatter.schema";
import { SITE_URL, SITE_TITLE } from "../../config";
import { array } from "zod";
import PageLayout from "../../layouts/PageLayout.astro";
import PageMeta from "../../components/PageMeta.astro";

const posts = await readAll({
    directory: "blog",
    frontmatterSchema: blog,
});

const filteredPosts = posts
    .filter((p) => p.frontmatter.draft !== true)
    .filter(({ frontmatter }) => frontmatter.tags !== undefined);

var allPostTags: Array<string> = [];

filteredPosts.map((post) => {
    const posttags: Array<string> = post.frontmatter.tags;
    allPostTags.push(...posttags);
});

function uniqueMask(value: any, index: number, array: Array<string>) {
    return array.indexOf(value) === index;
}

const uniquePostTags = allPostTags.filter(uniqueMask);

export async function getStaticPaths() {
    const posts = await readAll({
        directory: "blog",
        frontmatterSchema: blog,
    });

    const filteredPosts = posts
        .filter((p) => p.frontmatter.draft !== true)
        .filter(({ frontmatter }) => frontmatter.tags !== undefined);

    var allPostTags: Array<string> = [];

    filteredPosts.map((post) => {
        const posttags: Array<string> = post.frontmatter.tags;
        allPostTags.push(...posttags);
    });

    function uniqueMask(value: any, index: number, array: Array<string>) {
        return array.indexOf(value) === index;
    }

    const uniquePostTags = allPostTags.filter(uniqueMask);
    return uniquePostTags.map((tag) => {
        return { params: { tag: tag } };
    });
}

function postWithTag(tag: string) {
    return filteredPosts
        .sort(
            (a, b) =>
                new Date(b.frontmatter.date).valueOf() -
                new Date(a.frontmatter.date).valueOf()
        )
        .filter(({ frontmatter }) => {
            return (
                frontmatter.tags?.find((t) => {
                    return t == tag;
                }) !== undefined
            );
        });
}

const { tag } = Astro.params;
---

<PageLayout>
    <PageMeta title={`Blog | ${SITE_TITLE}`} slot="meta" />

    <section slot="main">
        <h1 class="heading text-3xl font-bold mb-4">Tag: {tag}</h1>
        <ul>
            {
              postWithTag(tag).map((post) => {
                const formattedDate = new Date(
                  post.frontmatter.date
                ).toLocaleDateString("en-us", {
                  year: "numeric",
                  month: "short",
                  day: "numeric",
                });
                return (
                  <li class="grid grid-cols-[1fr] md:grid-cols-[1fr_auto] mb-3 md:gap-2 items-start">
                    <div class="title">
                      {post.frontmatter.external ? (
                        <a
                          href={post.frontmatter.url}
                          target="_blank"
                          class="unset
                              transition-[background-size] duration-300 
                              bg-gradient-to-r bg-left-bottom bg-no-repeat
                              bg-[length:0%_55%] hover:bg-[length:100%_55%] dark:bg-[length:0%_2px] hover:dark:bg-[length:100%_2px]
                              from-primary-blue to-primary-blue dark:from-primary-blue dark:to-primary-blue
                            "
                        >
                          <span>{post.frontmatter.title}</span>
                          <span>
                            <i class="ml-1 mr-1 text-[12px] pb-2 fa-solid fa-up-right-from-square" />
                          </span>
                        </a>
                      ) : (
                        <a
                          href={`/blog/${post.slug}`}
                          class="unset
                              transition-[background-size] duration-300 
                              bg-gradient-to-r bg-left-bottom bg-no-repeat
                              bg-[length:0%_55%] hover:bg-[length:100%_55%] dark:bg-[length:0%_2px] hover:dark:bg-[length:100%_2px]
                              from-primary-blue to-primary-blue dark:from-primary-blue dark:to-primary-blue
                            "
                        >
                          {post.frontmatter.title}
                        </a>
                      )}
                    </div>
                    <div class="text-text-muted text-sm italic pt-1">
                      <time datetime={post.frontmatter.date.toISOString()}>
                        {formattedDate}
                      </time>
                    </div>
      
                    {post.frontmatter.tags === undefined ? undefined : (
                      <p class="col-span-2 break-words line-clamp-2 hyphens-auto">
                        <span class="fa fa-solid fa-tag text-text-muted" />
                        {Object.keys(post.frontmatter.tags)
                          .map((k) => {
                            return post.frontmatter.tags[k];
                          })
                          .join(", ")}
                      </p>
                    )}
                    {post.frontmatter.external ? undefined : (
                      <p class="col-span-2 break-words line-clamp-2 hyphens-auto mb-4 description">
                        {post.frontmatter.description}
                      </p>
                    )}
                  </li>
                );
              })
            }
          </ul>
    </section>
</PageLayout>
